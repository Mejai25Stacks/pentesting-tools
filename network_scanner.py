# /usr/bin/env python

import scapy.all as scapy
import optparse

def get_arguments():
    parser = optparse.OptionParser()
    parser.add_option("-t", "--target", dest="ip", help="The ip range to be scanned")
    (options, arguments) = parser.parse_args()
    if not options.ip:
        parser.error("[-] Please specify an ip range to be scanned, use --help for more info.")
    return options

def scan(ip):
    arp_request = scapy.ARP(pdst=ip)  # an ARP request that asks for the ip and MAC address?
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")  # an Ethernet request sent to the broadcast MAC address
    arp_request_broadcast = broadcast/arp_request  # we combine both frames to get a request that asks the ip and MAC address of all hosts on the network range
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]  # scapy.srp(arp_request_broadcast) returns a list of two list, answered hosts and unanswered hosts, the answered list being on index 0

    clients_list = []
    for element in answered_list:
        client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}  # a dictionary with an ip key and a mac key
        clients_list.append(client_dict)  # each dictionary (one ofr each host) is appended to the clients_list list
        # //element[1].psrc = ip address and element[1].hwsrc = MAC address
    return clients_list

def print_result(results_list):
    print("IP\t\t\tMAC Address\n-----------------------------------------------------")  # making it look good
    for client in results_list:
        print(client["ip"] + "\t\t" + client["mac"])


options = get_arguments()
ip_range = options.ip
scan_result = scan(ip_range)
print_result(scan_result)

#10.0.2.1/24
